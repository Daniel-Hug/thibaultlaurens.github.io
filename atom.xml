<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Thibault Laurens</title>
 <link href="http://thibaultlaurens.github.com/atom.xml" rel="self"/>
 <link href="http://thibaultlaurens.github.com"/>
 <updated>2013-05-10T12:27:34+01:00</updated>
 <id>http://thibaultlaurens.github.com</id>
 <author>
   <name>Thibault Laurens</name>
   <email>laurens.thibault@gmail.com</email>
 </author>

 
 <entry>
   <title>How the V8 engine works?</title>
   <link href="http://thibaultlaurens.github.com/javascript/2013/04/29/how-the-v8-engine-works"/>
   <updated>2013-04-29T00:00:00+01:00</updated>
   <id>http://thibaultlaurens.github.com/javascript/2013/04/29/how-the-v8-engine-works</id>
   <content type="html">&lt;h4 id='what_is_v8'&gt;What is V8?&lt;/h4&gt;

&lt;p&gt;V8 is a &lt;strong&gt;JavaScript engine&lt;/strong&gt; build in the google development center in Germany. It is &lt;a href='https://code.google.com/p/v8/wiki/Source' target='_blank' title='code.google.com/p/v8/wiki/Source'&gt;&lt;strong&gt;open source&lt;/strong&gt;&lt;/a&gt; and written in &lt;strong&gt;C++&lt;/strong&gt;. It is used for both client side (Googgle Chrome) and server side (node.js) JavaScript applications.&lt;/p&gt;

&lt;p&gt;V8 was first designed to increase the performance of the JavaScript execution inside web browsers. In order to obtain speed, V8 translates JavaScript code into more efficient machine code instead of using an interpreter. It compiles JavaScript code into machine code at execution by implementing a &lt;strong&gt;JIT (Just-In-Time) compiler&lt;/strong&gt; like a lot of modern JavaScript engines such as SpiderMonkey or Rhino (Mozilla) are doing. The main difference with V8 is that it doesn&amp;#8217;t produce bytecode or any intermediate code.&lt;/p&gt;

&lt;p&gt;The aim of this article is to show and to understand &lt;strong&gt;how V8 works, in order to produce optimized code&lt;/strong&gt; for both client side or server side applications. If you are already asking yourself &amp;#8220;Should I care about JavaScript performance?&amp;#8221; then I will answer with a citation, from Daniel Clifford (tech lead and manager of the V8 team): &amp;#8220;It&amp;#8217;s not just about making your current application run faster, it&amp;#8217;s about enabling things that you have never been able to do in the past&amp;#8221;.&lt;/p&gt;
&lt;div class='six centered columns'&gt;
    &lt;img alt='V8!' src='/assets/themes/foundation/images/post/21-03-13-v8/v8.PNG' /&gt;
&lt;/div&gt;
&lt;h4 id='hidden_class'&gt;Hidden class&lt;/h4&gt;

&lt;p&gt;JavaScript is a protoptye-based language: there is &lt;strong&gt;no classes&lt;/strong&gt; and objects are created by using a cloning process. Also, JavaScript is dynamically typed: types and type informations are not explicit and properties can be added and deleted to objects on the fly. Accessing types and properties effectively makes a first big challenge for V8. Instead of using a dictionnary-like data structure for storing object properties and doing a dynamic lookup to resolve the property location (like most JavaScript engine do), V8 creates &lt;strong&gt;hidden classes&lt;/strong&gt;, at runtime, in order to have an internal representation of the type system and to improve the property access time.&lt;/p&gt;

&lt;p&gt;Let&amp;#8217;s have for instance a &amp;#8220;Point&amp;#8221; function and the creation of two &amp;#8220;Point&amp;#8221; objects:&lt;/p&gt;
&lt;div class='ten centered columns'&gt;
    &lt;img alt='hidden class' src='/assets/themes/foundation/images/post/21-03-13-v8/hiddenclass.PNG' /&gt;
&lt;/div&gt;
&lt;p&gt;If the layout are the same, which is the case here, p and q belong to the same hidden class created by V8. This highlight another advantage in using hidden classes: it allows V8 to group objects witch properties are the same. Here &amp;#8220;p&amp;#8221; and &amp;#8220;q&amp;#8221; use the same &lt;strong&gt;optimized code&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Now let&amp;#8217;s assume that we want to add a &amp;#8220;z&amp;#8221; property to our &amp;#8220;q&amp;#8221; object, right after its declaration (which is perfectly fine with a dynamically typed language).&lt;/p&gt;

&lt;p&gt;How V8 will deal with this scenario? In fact, V8 &lt;strong&gt;creates a new hidden class everytime the constructor function declares a property&lt;/strong&gt; and keeps track of the changement in the hidden class. Why? Because if two objects are created (&amp;#8221;p&amp;#8221; and &amp;#8220;q&amp;#8221;) and if a member is added to the second object (&amp;#8221;q&amp;#8221;) after the creation, V8 needs to keep the last hidden class created (for the first object &amp;#8220;p&amp;#8221;) and to create a new one (for the second object &amp;#8220;q&amp;#8221;) with the new member.&lt;/p&gt;
&lt;div class='ten centered columns'&gt;
    &lt;img alt='transition information' src='/assets/themes/foundation/images/post/21-03-13-v8/transition.PNG' /&gt;
&lt;/div&gt;
&lt;p&gt;Everytime a new hidden class is created, the previous one is updated with a class transition indicating what hidden class has to be used instead of it.&lt;/p&gt;

&lt;h5 id='code_optimization'&gt;Code optimization&lt;/h5&gt;

&lt;p&gt;Because V8 creates a new hidden class for each property, hidden class creation should be kept to a minimum. To do this, try to avoid to add properties after the object creation and always initialize object members in the same order (to avoid the creation of different three of hidden classes).&lt;/p&gt;

&lt;p&gt;[Update] Another trick: Monomorphic operations are operations which only work on objects with the same hidden class. V8 creates hidden class when we call a function, if we call it again with different parameter types, V8 need to create another hidden class: &lt;strong&gt;Prefer monomorphic code to polymorphic code&lt;/strong&gt;&lt;/p&gt;
&lt;br /&gt;&lt;hr /&gt;&lt;br /&gt;
&lt;h4 id='more_example_on_how_v8_optimized_javascript_code'&gt;More example on how V8 optimized JavaScript code&lt;/h4&gt;
&lt;br /&gt;
&lt;h5 id='tagged_values'&gt;Tagged values&lt;/h5&gt;

&lt;p&gt;To have an efficient representation of numbers and JavaScript objects, V8 represents both of us with a &lt;strong&gt;32 bits&lt;/strong&gt; value. It uses a bit to know if it is an object (flag = 1) or an integer (flag = 0) called here SMall Integer or &lt;strong&gt;SMI&lt;/strong&gt; because of its 31 bits. Then, if a numeric value is bigger than 31 bits, V8 will box the number, turning it to a double and creating a new object to put the number inside.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code optimization&lt;/strong&gt;: Try to use 31 bit signed numbers whenever possible to avoid the expensive boxing operation into JavaScript object.&lt;/p&gt;
&lt;br /&gt;
&lt;h5 id='arrays'&gt;Arrays&lt;/h5&gt;

&lt;p&gt;V8 uses to differents methods to handle arrays:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Fast elements&lt;/strong&gt;: Designed for arrays where set of keys are very compact. They have a &lt;strong&gt;linear storage buffer&lt;/strong&gt; that can be accessed very efficiently.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Dictionary elements&lt;/strong&gt;: Designed for sparse arrays which don&amp;#8217;t have every elements inside of them. It is actually a &lt;strong&gt;hash table&lt;/strong&gt;, more expensive to access than &amp;#8220;Fast Elements&amp;#8221;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Code optimization&lt;/strong&gt;: Be sure that V8 uses &amp;#8220;Fast Elements&amp;#8221; to handle arrays, in other words, avoid sparse arrays where keys are not next incremental numbers. Also, try to avoid to pre-allocate large arrays, better is to grow as you go. Finally, don&amp;#8217;t delete elements in arrays: it makes the key set sparse.&lt;/p&gt;
&lt;br /&gt;&lt;hr /&gt;&lt;br /&gt;
&lt;h4 id='how_v8_compiles_javascript_code'&gt;How V8 compiles JavaScript code?&lt;/h4&gt;
&lt;br /&gt;
&lt;p&gt;V8 has two compilers!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A &lt;strong&gt;&amp;#8220;Full&amp;#8221; Compiler&lt;/strong&gt; that can generate good code for any JavaScript: good but not great JIT code. The goal of this compiler is to generates code quickly. To achieve its goal, it doesn&amp;#8217;t do any type analysis and doesn&amp;#8221;t know anything about types. Instead, it uses an &lt;strong&gt;Inline Caches&lt;/strong&gt; or &amp;#8220;IC&amp;#8221; strategy to refine knowledge about types while the program run. IC is very efficient and bring about 20 times speed improvment.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;An &lt;strong&gt;Optimizing Compiler&lt;/strong&gt; that produces great code for most of the JavaScript language. It comes later and re-compiles hot functions. The optimizing compiler takes types from the Inline Cache and make decisions about how to optimize the code better. However, some language features are not supported yet like try/catch block for instance. (The workaround for try/catch blocks is to write the &amp;#8220;non stable&amp;#8221; code into a function and to call the function in the try block)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;p&gt;&lt;strong&gt;Code optimization&lt;/strong&gt;: V8 also supports &lt;strong&gt;de-optimization&lt;/strong&gt;: the optimizing compiler makes optimistic assumptions from the Inline Cache about the different types, de-optimization comes if these assumptions are invalids. For example, if an hidden class generated was not the one expected, V8 throws away the optimized code and come back to the Full Compiler to get types again from the Inline Cache. This process is slow and should be avoided by trying to not change functions after they are optimized.&lt;/p&gt;
&lt;br /&gt;&lt;hr /&gt;&lt;br /&gt;
&lt;h4 id='resources'&gt;Resources&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Google I/O 2012 &amp;#8220;Breaking the JavaScript Speed Limit with V8&amp;#8221; with Daniel Clifford, tech lead and manager of the V8 team: &lt;a href='https://www.youtube.com/watch?v=UJPdhx5zTaw' target='_blank' title='video'&gt;video&lt;/a&gt; and &lt;a href='http://v8-io12.appspot.com' target='_blank' title='slides'&gt;slides&lt;/a&gt;.&lt;/li&gt;

&lt;li&gt;V8: an open source JavaScript engine: &lt;a href='http://www.youtube.com/watch?v=hWhMKalEicY' target='_blank' title='video'&gt;video&lt;/a&gt; of Lars Bak, V8 core engineer.&lt;/li&gt;

&lt;li&gt;Nikkei Electronics Asia blog post: &lt;a href='http://techon.nikkeibp.co.jp/article/HONSHI/20090106/163615/' target='_blank' title='go to techon.nikkeibp.co.jp'&gt;Why Is the New Google V8 Engine So Fast?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
 </entry>
 
 <entry>
   <title>Distributed and collaborative algorithms</title>
   <link href="http://thibaultlaurens.github.com/ubiquitous/2013/04/23/distributed-and-collaborative-algorithms"/>
   <updated>2013-04-23T00:00:00+01:00</updated>
   <id>http://thibaultlaurens.github.com/ubiquitous/2013/04/23/distributed-and-collaborative-algorithms</id>
   <content type="html">&lt;h4 id='distributed_algorithms'&gt;Distributed algorithms&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Problems solved: resource allocation, distributed search, cooperative scheduling, spanning tree generation&lt;/li&gt;

&lt;li&gt;Are typically executed &lt;strong&gt;concurrently&lt;/strong&gt; with separate parts of the algo being run &lt;strong&gt;simultaneously&lt;/strong&gt; on &lt;strong&gt;independent&lt;/strong&gt; processors.&lt;/li&gt;

&lt;li&gt;Challenge: &lt;strong&gt;coordinating&lt;/strong&gt; the behavior of the independent parts of the algo in the face of processor &lt;strong&gt;failures&lt;/strong&gt; and unreliable communication links&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Collaboration Filtering (CF)&lt;/strong&gt;: Process of filtering for information or patterns using the know preferences of a group of users to make recommendations or predictions of the unknown preferences for others users.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Common insight&lt;/strong&gt;: personal tastes are correlated&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recommender systems&lt;/strong&gt; assist and augment the natural social process to help people to find the most interesting and valuable information for them. &lt;strong&gt;Tapestry&lt;/strong&gt;, first recommender system (1992)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CF fundamental assumption&lt;/strong&gt;: if users X and Y rate n items similarly, or have similar behaviors, and hence will rate or act on other items similarly.&lt;/p&gt;
&lt;br /&gt;
&lt;h4 id='cf_challenges'&gt;CF Challenges&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Provide fast and &lt;strong&gt;accurate&lt;/strong&gt; recommendations to attract the interest of customers&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Data Sparsity&lt;/strong&gt;: when very large product set, performance challenge&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Cold start&lt;/strong&gt; problem: new user or item just entered the system, not enough info&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Reduced coverage&lt;/strong&gt; problem: small number of user’s rating but large number or item&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Neighboor transitivity&lt;/strong&gt;: data sparsity -&amp;gt; users with similar tastes may not be identified as such if they have not both rated any of the same items&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Scalability&lt;/strong&gt;: if users and items grow tremendously, CF algo will suffer&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Synonymy&lt;/strong&gt;: same or very similar items have different names, need to construct a semantic space to associate terms and documents&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Gray Sheep&lt;/strong&gt;: users whose opinions do not consistently agree or disagree with any group of people&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Shilling attacks&lt;/strong&gt;: tons of positive recommendation for their own materials and negative recommendation for their competitors.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Privacy&lt;/strong&gt;: people may not want their habit or views widely known&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Increased noise&lt;/strong&gt;: another challenge as the user population becomes more diverse&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The Netfix Prize Challenge&lt;/strong&gt;: open competition for the best CF algo. Team “BellKor’s Pragmatic Chaos” 10.07% improvement of RMSE in 2009&lt;/p&gt;
&lt;br /&gt;
&lt;h4 id='cf_techniques'&gt;CF Techniques&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Memory-Based&lt;/li&gt;

&lt;li&gt;Model-Based&lt;/li&gt;

&lt;li&gt;Hybrid&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h4 id='memorybased_cf_algos'&gt;Memory-Based CF algos:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Generate prediction with entire or sample of the user-item database. Every user is part of a group of people with similar interests. Prediction produced with the neighbors of a new user.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Neighborhood-based CF algo&lt;/strong&gt; is a prevalent memory based CF algo. It calculates the similarity or weight between two users or two items, produce prediction and generate Top-N recommendation.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Similarity computation&lt;/strong&gt; is a critical step, determines the similarity between two co-rated items or two users.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Correlation-Based similarity&lt;/strong&gt; measured by computing a &lt;strong&gt;Person correlation&lt;/strong&gt;&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Vector Cosine-Based similarity&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Prediction and recommendation computation&lt;/strong&gt; is the most important step in a CF system. In the neighborhood-based CF algo, a subset of nearest neighbor of the active user are chosen based on their similarity with him and a weighted aggregate of their rating is used to generate prediction for the active user.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Weighted sum of others ratings&lt;/strong&gt;&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Simple weighted average&lt;/strong&gt; (for item-based prediction)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Top-N recommendation&lt;/strong&gt; is to recommend a set of N top-ranked items that will be of interest to a certain user (analyze the user-item matrix to discover relations between different user or items and use them to compute the recommendation)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;User-based&lt;/strong&gt; Top-N recommendation algo&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Item-based&lt;/strong&gt; Top-N recommendation algo&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h4 id='modelbased_cf_algos'&gt;Model-Based CF Algos:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Model such as machine learning or data mining algo allow the system to learn to recognize complex patterns based on the training data and then make intelligent prediction for the collaborative filtering tasks.&lt;/li&gt;

&lt;li&gt;Bayesian models, clustering models and dependency networks have been investigated to &lt;strong&gt;solve the shortcoming of memory-based algo&lt;/strong&gt;.&lt;/li&gt;

&lt;li&gt;The goal is more to uncover latent factors rather than explain ratings. Most of the model are based on creating a classification or clustering technique (the number of paramaters can be reduced)&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Advantages&lt;/strong&gt;: handle sparsity better than memory-based, helps with scalability for large data sets, improve the prediction performance, intuitive rationale for the recommendation.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Disadvantages&lt;/strong&gt;: expensive model building, tradeoff between prediction performance and scalability&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h4 id='hybrid_cf_algo'&gt;Hybrid CF Algo&lt;/h4&gt;

&lt;p&gt;To combine the memory-based and the model-based algos, overcome the limitation of native CF approaches, improves the prediction performance, overcomes the CF problems such as sparsity and loss information. Disadvantage: increased complexity and expensive to implement.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Software Quality Assurance</title>
   <link href="http://thibaultlaurens.github.com/management/2013/04/19/software-quality-assurance"/>
   <updated>2013-04-19T00:00:00+01:00</updated>
   <id>http://thibaultlaurens.github.com/management/2013/04/19/software-quality-assurance</id>
   <content type="html">&lt;h5 id='history'&gt;History&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;1970’s: customer orient development -&amp;gt; software lifecycle crisis&lt;/li&gt;

&lt;li&gt;1980’s: customer satisfaction consideration -&amp;gt; shared responsibility&lt;/li&gt;

&lt;li&gt;1990’s: scope of quality expanded -&amp;gt; non-functional issues (safety, ethics…)&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id='what_is_quality'&gt;What is quality?&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Relative&lt;/strong&gt;: it’s about a product being used in a particular context&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Multidimensional&lt;/strong&gt;: price, reliability, maintainability, ease of use …&lt;/li&gt;

&lt;li&gt;Quality dimensions are &lt;strong&gt;dependent&lt;/strong&gt;: ex: price and reliability are not independent&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;AQL&lt;/strong&gt;: Acceptable Quality Level&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ISO/IEC 8402&lt;/strong&gt;: “The totality of features and characteristics of a product or service that bear upon its ability to satisfy specified or implied needs”&lt;/p&gt;

&lt;h5 id='levels_of_quality'&gt;&lt;strong&gt;Levels&lt;/strong&gt; of quality:&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Absolute&lt;/strong&gt; (quantify)&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Relative&lt;/strong&gt; (comparative)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Quality Process -&amp;gt; Quality Product&lt;/strong&gt; (concept from manufacturing and engineering)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Garvin (1998)&lt;/strong&gt;, Quality: transcendent, user, process, product and value based&lt;/p&gt;

&lt;p&gt;Cost versus Quality optimisation: an &lt;strong&gt;optimum&lt;/strong&gt; needs to be established&lt;/p&gt;

&lt;p&gt;Software &lt;strong&gt;quality characteristics&lt;/strong&gt;: efficiency, cost, effectiveness, reliability, maintainability, safety, security, usability&lt;/p&gt;

&lt;h5 id='quality_as_part_of_software_documentation'&gt;Quality as part of &lt;strong&gt;software documentation&lt;/strong&gt;&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Functional specification&lt;/strong&gt;: what the system will do&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Quality plan&lt;/strong&gt;: quality attributes applicable, how it is assured&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Project management plan&lt;/strong&gt;: timing, dependencies and resource requirements&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id='mccalls_model'&gt;&lt;strong&gt;McCall’s Model&lt;/strong&gt;&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Product Operation&lt;/strong&gt;: the smooth running of existing software – Correctness, reliability, efficiency, integrity, usability&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Product Revision&lt;/strong&gt;: the ease of changing software and bug fixing – Maintainability, testability, flexibility&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Product Transition&lt;/strong&gt; - Portability, reusability, interoperability&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id='quality_factor__relationship_between_pairs_of_quality_factors'&gt;&lt;strong&gt;Quality Factor&lt;/strong&gt; – Relationship (between pairs of quality factors):&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Indifferent&lt;/strong&gt;: zero correlation&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Complementary&lt;/strong&gt;: positive correlation&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Conflicting&lt;/strong&gt;: negative correlation&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id='cmmi_capability_maturity_model_integration'&gt;&lt;strong&gt;CMMI&lt;/strong&gt;: Capability Maturity Model Integration&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Process improvement approach to software development&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Levels&lt;/strong&gt;: chaotic (initial), repeatable (managed), defined, quantitatively managed, optimised&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id='measures_for_software_quality'&gt;&lt;strong&gt;Measures&lt;/strong&gt; for Software Quality:&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;test&lt;/strong&gt; measure a given quality factor&lt;/li&gt;

&lt;li&gt;A &lt;strong&gt;metric&lt;/strong&gt; is a quantifiable measurement relating to a quality criteria&lt;/li&gt;

&lt;li&gt;A &lt;strong&gt;scale&lt;/strong&gt; defines the &lt;strong&gt;range&lt;/strong&gt; and &lt;strong&gt;unit&lt;/strong&gt; of measurement&lt;/li&gt;

&lt;li&gt;A measurement type may be &lt;strong&gt;binary&lt;/strong&gt; or &lt;strong&gt;relative&lt;/strong&gt;&lt;/li&gt;

&lt;li&gt;A &lt;strong&gt;range&lt;/strong&gt; which includes a worst, a best, a planned and a “now” value&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id='mccall'&gt;McCall:&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;quality factor value: Fq = c1m1 + c2m2 + … + cnmn&lt;/strong&gt;&lt;/li&gt;

&lt;li&gt;Ci: criteria relevance or weighting (internal measure)&lt;/li&gt;

&lt;li&gt;Mi: criteria metric value or score (internal measure), 0 to 10&lt;/li&gt;

&lt;li&gt;N: number of criteria&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Software metrics: count &lt;strong&gt;Lines of code&lt;/strong&gt; (&lt;strong&gt;LOC&lt;/strong&gt;) or KLOCs (30lines/day developer average)&lt;/p&gt;

&lt;h5 id='code_complexity_metrics'&gt;Code complexity metrics:&lt;/h5&gt;
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Halstead&lt;/strong&gt;: count operators and operands&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;n1: number of distinct &lt;strong&gt;operators&lt;/strong&gt; in a program&lt;/li&gt;

&lt;li&gt;n2: number of distinct &lt;strong&gt;operands&lt;/strong&gt; in a program&lt;/li&gt;

&lt;li&gt;N1: total number of operator occurrences&lt;/li&gt;

&lt;li&gt;N2: total number of operand occurrences&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Vocabulary&lt;/strong&gt;: n = n1 + n2, Implementation length: N = N1 + N2&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Program length&lt;/strong&gt; N = n1log1n1 + n2log2n2&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Program volume&lt;/strong&gt; V = Nlog2(n1+n2)&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Program level&lt;/strong&gt; (complexity) L = (2/n1) x (n2/N2)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;McCabe&lt;/strong&gt;: determine control structure from &lt;strong&gt;flow graph&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Detail design notation with loops and all the paths as unit test prediction&lt;/li&gt;

&lt;li&gt;Flow graphs to measure &lt;strong&gt;code complexity&lt;/strong&gt;&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Regions&lt;/strong&gt; = number of arcs (edges) – no of nodes + 2&lt;/li&gt;

&lt;li&gt;1-10: simple, 11-20:moderate, 21-50:complex, high risk, 51+: untestable&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h5 id='problems_with_software_metrics'&gt;Problems with Software metrics:&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Relationship between quality criteria and metric values need to be established&lt;/li&gt;

&lt;li&gt;Some criteria are unmeasurable or not have tested metrics&lt;/li&gt;

&lt;li&gt;Some metrics are linked to several criteria and difficult to predict&lt;/li&gt;

&lt;li&gt;Cost of collection&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;ISO 9126&lt;/strong&gt; defines 6 software quality criteria: functionality, reliability, usability, efficiency, maintainability and portability and sub characteristics.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reasons to adopt standards&lt;/strong&gt;: avoid errors, create confidence, increase productivity and product quality, reduce development costs, customers expect it, condition of contract&lt;/p&gt;

&lt;p&gt;Standards apply at three levels: &lt;strong&gt;Product&lt;/strong&gt; (code, documents, methodology), &lt;strong&gt;Project&lt;/strong&gt; and &lt;strong&gt;Management&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Hierrachy of standard makers: International (ISO, IEC), National (BSI, ANSI), Sector Specific (Defense, Nuclear), Proprietary (UML), Organizational (W3C, MS), Project, Personal&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ISO 9000&lt;/strong&gt;: define what you do, document the system, demonstrate that you do what you say you do, demonstrate it to customers through registration (obtain certification)&lt;/p&gt;

&lt;h5 id='iso_9001'&gt;ISO 9001:&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Models for quality assurance in design, development, production, installation and servicing&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Certification&lt;/strong&gt;: recognise competence or conformance, provide evidence that an organisation is capable of producing quality products or services&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Accreditation&lt;/strong&gt;: ability to award certified, an accreditation body accredits a certification body after satisfying itself that it operates in accordance with appropriate criteria of competence&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id='quality_management'&gt;Quality Management:&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Hierarchy&lt;/strong&gt;: Quality Management (quality plan), Quality Assurance (define procedures), Quality Control (check procedures)&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Evolution&lt;/strong&gt;: Inspection focus on errors, quality control focus on product, quality assurance focus on process, quality management focus on development culture&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Quality Control&lt;/strong&gt;: operational techniques and activities used to fulfil requirements for quality&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Quality Assurance&lt;/strong&gt;: steps taken to make sure that a company’s product or service are sufficiently high quality, includes software engineering methods, review, testing, documentation, software dev standards &amp;amp; control, measurement, reporting.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Total Quality Management&lt;/strong&gt;: is the management approach of an organization, centred on quality and based on the participation of all its members, and aiming at long-term success through customer satisfaction and benefits to all members of the organization and the society.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Quality and Safety critical systems&lt;/strong&gt;: result in loss or damage to people, assets or equipment. &lt;strong&gt;Control system&lt;/strong&gt; &amp;amp; &lt;strong&gt;Protection system&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Validation&lt;/strong&gt;: Concerns the software product, demonstrate that system satisfies user requirements. Assessed using dynamic &lt;strong&gt;testing&lt;/strong&gt; (performance, regression, acceptance, usability, stress, security, recovery, alpha and beta testing)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Verification&lt;/strong&gt;: Concerns the dev process, ensure component or system conforms to its specification, the output conforms to its inputs&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Testing adequacy&lt;/strong&gt;: complete testing usually impossible. Specify % coverage, testing costs, how to generate test values&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dynamic testing elements&lt;/strong&gt;: program under test, test case, observation, analysis of results&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Generic testing process&lt;/strong&gt;: Planning, Specification, Execution, Result recording, evaluation&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Test plan&lt;/strong&gt;: for a module, component or system document part of the system being tested, general testing strategy, hardware and software dependencies, date, location, individuals. For each test include what program/module, what level of testing, scenario or test case, how to test (input and output expected), test results (analyse)&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Mobile platforms in pervasive computing</title>
   <link href="http://thibaultlaurens.github.com/ubiquitous/2013/04/10/mobile-platforms-in-pervasive-computing"/>
   <updated>2013-04-10T00:00:00+01:00</updated>
   <id>http://thibaultlaurens.github.com/ubiquitous/2013/04/10/mobile-platforms-in-pervasive-computing</id>
   <content type="html">&lt;h4 id='types_of_mobile_devices'&gt;Types of mobile devices:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Remote controls and smart remote&lt;/li&gt;

&lt;li&gt;Handheld gaming devices&lt;/li&gt;

&lt;li&gt;Palmtops / Tablets&lt;/li&gt;

&lt;li&gt;Smartphones&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h4 id='smartphones'&gt;Smartphones:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Standard phone features+embedded programmable computer, dominate the market&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Advantages&lt;/strong&gt;: wide range of functionality, powerful hardware&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Disadvantages&lt;/strong&gt;: expensive, complex app deployment, phone network engagement&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;&lt;br /&gt;
&lt;h4 id='main_smartphone_os'&gt;Main smartphone OS:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;iOS: priority &lt;strong&gt;performance&lt;/strong&gt; and &lt;strong&gt;user experience&lt;/strong&gt; ( + LLVM)&lt;/li&gt;

&lt;li&gt;Android: priority &lt;strong&gt;flexibility&lt;/strong&gt; and &lt;strong&gt;freedom for developers&lt;/strong&gt;&lt;/li&gt;

&lt;li&gt;WP: priority &lt;strong&gt;compatibility with Microsoft technologies&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h4 id='ios'&gt;iOS:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Development: C, C++ or Objective-C tools only for Mac, native code in secure space&lt;/li&gt;

&lt;li&gt;UI: “&lt;strong&gt;cocoa touch&lt;/strong&gt;” model, “&lt;strong&gt;springboard&lt;/strong&gt;” grid menu, standard hardware buttons&lt;/li&gt;

&lt;li&gt;Multitasking: suspend-and-restore, request to run in background&lt;/li&gt;

&lt;li&gt;Deployment model: &lt;strong&gt;debug, public and enterprise deployment&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h4 id='android'&gt;Android:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Development: Java on an in-built VM, C/C++ limited components, v 2.3.3 most popular&lt;/li&gt;

&lt;li&gt;UI: java-based ui classes, user choose and customize layout, app can provide widgets&lt;/li&gt;

&lt;li&gt;Multitasking: apps divided into “&lt;strong&gt;Activities&lt;/strong&gt;”, invoked by other app, suspended when not on screen, “&lt;strong&gt;intents&lt;/strong&gt;” to discover other activities + “&lt;strong&gt;services&lt;/strong&gt;” for background use&lt;/li&gt;

&lt;li&gt;Deployment model: app &lt;strong&gt;self-signed by developers&lt;/strong&gt; (no approval process), Android market or public dl (public dl requires complex conf of the phone)&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h4 id='windows_phone_8'&gt;Windows Phone 8:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Development: XAML/.NET (C# or VB) + Direct3D (C++)&lt;/li&gt;

&lt;li&gt;UI: “Modern UI”, updated “tiles”, Direct3D apps control the entire screen&lt;/li&gt;

&lt;li&gt;Multitasking: suspend-and-restore (in &lt;strong&gt;Ram&lt;/strong&gt; or “&lt;strong&gt;tombstoned&lt;/strong&gt;” state to Flash), &lt;strong&gt;periodic&lt;/strong&gt; (every 30min for 25s) or &lt;strong&gt;intensive&lt;/strong&gt; (run once up to 10min, wi-fi, locked…) agents&lt;/li&gt;

&lt;li&gt;Deployment: &lt;strong&gt;licenses sold separately to software&lt;/strong&gt; -&amp;gt; trial version + other features dev&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;&lt;br /&gt;
&lt;h4 id='general_programming_consideration'&gt;General Programming Consideration:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;“&lt;strong&gt;Watchdog&lt;/strong&gt;” activated if a process doesn’t respond to a user input or OS event&lt;/li&gt;

&lt;li&gt;Desktop OS: “not responding” warning but on mobile the app crash immediately&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Multi-threaded&lt;/strong&gt; apps ensure they can continue responding during long process tasks&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;&lt;br /&gt;
&lt;h4 id='infrared_simple_remote_control'&gt;Infrared: Simple Remote Control&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;RC-5&lt;/strong&gt; (European, system address up to 32 and command number up to 128, standard addresses and commands: &lt;strong&gt;interchangeable and universal remotes&lt;/strong&gt;) or &lt;strong&gt;NEC&lt;/strong&gt; (Japanese, addresses and commands up to 255, standardized at brand level: &lt;strong&gt;avoids interferences&lt;/strong&gt;) IR protocol&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;IrDA&lt;/strong&gt; spec for smartphone and more complex comm, &lt;strong&gt;IrDA-data&lt;/strong&gt; and &lt;strong&gt;IrDA-control&lt;/strong&gt;, layers like TCP/IP stack (&lt;strong&gt;IrCOMM&lt;/strong&gt; for standard comm port or &lt;strong&gt;IrLAN&lt;/strong&gt; for LAN connection)&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h4 id='bluetooth'&gt;Bluetooth:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Similar to WiFi technique but 100m, multiple “profiles” for different ranges of function&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Bluetooth Smart&lt;/strong&gt;: new, medium-range com, lower speed for less power&lt;/li&gt;

&lt;li&gt;Discovery and Pairing: &lt;strong&gt;GAP&lt;/strong&gt; (Generic Access Profile) specifies &lt;strong&gt;SDP&lt;/strong&gt; (Service Discovery Protocol). &lt;strong&gt;Inquiry&lt;/strong&gt; signal send and &lt;strong&gt;discoverable&lt;/strong&gt; devices resp with their id + profiles supported, &lt;strong&gt;pairing&lt;/strong&gt; with shared access key for some connection&lt;/li&gt;

&lt;li&gt;Security concerns: profile with no pairing configured -&amp;gt; silently attacked&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h4 id='nfc'&gt;NFC:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;4cm, radio signal conveyed by magnetic induction, electromagnetic field generated by one device can power the other so use of unpowered passives devices OK&lt;/li&gt;

&lt;li&gt;Apps: close proximity data exchange, contactless card replacement, phone can read data in passive devices&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h4 id='wifi'&gt;WIFI:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Radio signals using &lt;strong&gt;IEEE 802.11&lt;/strong&gt; standard&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Adhoc&lt;/strong&gt; (no internet) or &lt;strong&gt;infrastructure&lt;/strong&gt; (with central access point)mode&lt;/li&gt;

&lt;li&gt;Optional encryption (WEP insecure, WPA or WPA2 stronger)&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h4 id='3g'&gt;3G:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;3rd generation protocols / &lt;strong&gt;EDGE&lt;/strong&gt; (US) or &lt;strong&gt;UMTS&lt;/strong&gt; (Europe) protocols&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h4 id='4g'&gt;4G:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Mobile WIMAX&lt;/strong&gt; (Japan) or &lt;strong&gt;LTE&lt;/strong&gt; (Europe+USA) protocols -&amp;gt; 100Mb/s&lt;/li&gt;

&lt;li&gt;“Tragedy of the anticommons”: patents held by 50+ company to dev 4G hardware&lt;/li&gt;
&lt;/ul&gt;</content>
 </entry>
 
 <entry>
   <title>Project Approaches and methodologies</title>
   <link href="http://thibaultlaurens.github.com/management/2013/04/04/project-approaches-and-methodologies"/>
   <updated>2013-04-04T00:00:00+01:00</updated>
   <id>http://thibaultlaurens.github.com/management/2013/04/04/project-approaches-and-methodologies</id>
   <content type="html">&lt;h3 id='software_development'&gt;Software development&lt;/h3&gt;
&lt;br /&gt;
&lt;h4 id='why_to_develop_software_systems'&gt;Why to develop software systems?&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Automation&lt;/strong&gt;: To reduce costs and improve both quality and service (bank account management, library loan administration, stock control…)&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Information&lt;/strong&gt;: Improve decision making by generating useful information (sales analysis, inventory management, insurance policies…)&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Transformation&lt;/strong&gt;: New technologies create new opportunities for organisations. Internet applications changed the significance of time and geography (e-commerce, e-learning, social network, online news…)&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h4 id='how_to_develop_software_system'&gt;How to develop software system?&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Unstructured&lt;/strong&gt; (or &lt;strong&gt;partially&lt;/strong&gt;) development&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Developers can start coding quickly before analysis and design has been done&lt;/li&gt;

&lt;li&gt;Problem: frequent re-working, lack of clearly defined stages&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Structured&lt;/strong&gt; development:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Break the project into clearly defined &lt;strong&gt;stages&lt;/strong&gt;, stages may take place in sequence or in parallel&lt;/li&gt;

&lt;li&gt;Stages are composed by a set of predefined &lt;strong&gt;tasks&lt;/strong&gt;, tasks produces one or more deliverables&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h4 id='define_each_stage_in_terms_of'&gt;Define each stage in terms of:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input and output&lt;/strong&gt;&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Quality&lt;/strong&gt;: Working to Standards, applying techniques, reviews, inspections, testing&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Techniques used&lt;/strong&gt;: Structured techniques (dataflow diagram, logical data model) or OO techniques (UML diagrams like class or sequence diagrams)&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h4 id='resources_required'&gt;Resources required:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Hardware, Software, Staff (+DB designer &amp;amp; dev, web designer&amp;#8230;)&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;&lt;hr /&gt;&lt;br /&gt;
&lt;h3 id='software_development_methodologies'&gt;Software development methodologies&lt;/h3&gt;
&lt;br /&gt;
&lt;h4 id='software_lifecycle_phases'&gt;Software lifecycle phases:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Planning&lt;/strong&gt;&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Analysis&lt;/strong&gt; (Business or requirement analysis)&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Design&lt;/strong&gt;&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Implementation&lt;/strong&gt;&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Testing&lt;/strong&gt;&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Operation and maintenance&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h4 id='waterfall_model'&gt;Waterfall model&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Analysts and users proceed in sequence from &lt;strong&gt;one phase to another&lt;/strong&gt;&lt;/li&gt;

&lt;li&gt;When to use: low risk applications, experienced staff familiar with the environment, requirements unlikely to change, clear existing and known requirements.&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h4 id='rapid_application_development_rad__prototyping'&gt;Rapid application development (RAD - Prototyping)&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Develop some parts of systems quickly and give them to users for &lt;strong&gt;feedback&lt;/strong&gt;&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Throwaway prototyping&lt;/strong&gt;: One or more prototypes are developed to test some ideas of the proposed system, prototypes are discarded when the true dev is commenced.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Evolutionary prototyping&lt;/strong&gt;: A prototype is developed and modified until it is finally in a state where it can be operational system&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Pros&lt;/strong&gt;: end-user involvement, clarify user requirements, usability of the system.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Cons&lt;/strong&gt;: hard to control budgets/resource use, danger of “requirements drift”&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h4 id='spiral_model'&gt;Spiral model&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Another way of looking at the waterfall model (see also &lt;strong&gt;V cycle&lt;/strong&gt;)&lt;/li&gt;

&lt;li&gt;Modeled as a &lt;strong&gt;loop&lt;/strong&gt; where the proposed system is considered in more details in each loop, series of prototype, cost determined by the width of the spiral&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Four phases&lt;/strong&gt;: determine goals, alternatives, constraints, evaluate alternatives &amp;amp; risks, develop &amp;amp; test, evaluation and plan for next phases&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h4 id='agile'&gt;Agile&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Focus on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Working software&lt;/strong&gt; than comprehensive documentation&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Customer collaboration&lt;/strong&gt;/participation than contract negotiation&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Responding to change&lt;/strong&gt; than following a plan&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Team work and self-organisation&lt;/strong&gt; than having a coordinator or a manager&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Methodologies: XP, Scrum, ASD (Adaptive Software Development), FDD (Feature Driven Development)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h4 id='extreme_programming_xp'&gt;Extreme Programming (XP)&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Best practices: customer team member, user story, test driven design and dev, pair programming, collective ownership, continuous integration&lt;/li&gt;

&lt;li&gt;4 principles: Communication, simplicity, feedback, courage&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h4 id='scrum'&gt;Scrum&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Scrum master&lt;/strong&gt;: implements scrum, a coach, removes any impediment&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Product owner&lt;/strong&gt;: represents the customer, maintain product backlog, prioritise&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Team&lt;/strong&gt;: between 5 and 9, self-organisation, cross functional, specific expertise but no specific role&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Product backlog&lt;/strong&gt;: contains prioritized list of tasks or users stories, constantly updated&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Sprint&lt;/strong&gt;: 2 to 4 weeks, no changes during sprint, working deliverable at the end&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Sprint backlog&lt;/strong&gt;: users stories with states (to do, working on, done, bug)&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Daily scrum&lt;/strong&gt;: 5 minutes, stand-up, what I have done, what I will do, impediment&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h4 id='online_evolution_model'&gt;Online Evolution Model&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Developed for web apps, combination of existing software methods and activities&lt;/li&gt;

&lt;li&gt;Two cycles: &lt;strong&gt;Build and test cycle&lt;/strong&gt; and &lt;strong&gt;Evolution cycle&lt;/strong&gt; corresponds to the two phases &lt;strong&gt;Offline development&lt;/strong&gt; and &lt;strong&gt;Online evolution&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h4 id='choosing_a_methodology'&gt;Choosing a methodology:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Type of the system&lt;/strong&gt;: real-time, single or multi users, single or multi-platform&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Time to market&lt;/strong&gt;&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Changing requirements&lt;/strong&gt;&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Users involvement&lt;/strong&gt;&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Technologies&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
 </entry>
 
 <entry>
   <title>Pervasive Computing Environments</title>
   <link href="http://thibaultlaurens.github.com/ubiquitous/2013/03/17/pervasive-computing-environments"/>
   <updated>2013-03-17T00:00:00+00:00</updated>
   <id>http://thibaultlaurens.github.com/ubiquitous/2013/03/17/pervasive-computing-environments</id>
   <content type="html">&lt;h4 id='pervasice_computing'&gt;Pervasice computing&lt;/h4&gt;

&lt;p&gt;An environment in which people interact with embedded (and mostly invisible) computers and in which networked devices are aware of their surroundings and peers and are able to provide services from peers effectively. Multiple distributed computers with adequate processing, memory and communications capability. High availability, reliability, adapt to changes in environment.&lt;/p&gt;
&lt;br /&gt;&lt;hr /&gt;
&lt;h4 id='reminders'&gt;Reminders:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;HCI&lt;/strong&gt;: Human-Computer Interaction&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Harvard Architecture&lt;/strong&gt;: is a computer architecture with physically separate storage and signal pathways for instructions and data. Difference with the &lt;strong&gt;Von Neumann&lt;/strong&gt; architecture.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;RISC&lt;/strong&gt;: (Reduced Instruction Set Computing) “CPU design strategy based on the insight that simplified instructions can provide higher performance if this simplicity enables much faster execution of each instruction”. CISC (Complex Instruction Set Computing) is the opposition.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;&lt;br /&gt;
&lt;h4 id='terminology'&gt;Terminology:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Ambient intelligence&lt;/strong&gt;: environment that senses and responds&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;The internet of things&lt;/strong&gt;: where real world objects have virtual internet representations&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Haptic computing&lt;/strong&gt;: computer interaction using mechanical tactile feel or movement&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h4 id='evolution'&gt;Evolution:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Distributed computing&lt;/strong&gt; (message passing, RPC, fault tolerance&amp;#8230;)&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Mobile computing&lt;/strong&gt; (adaptive applications, location awareness, mobile networking&amp;#8230;)&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Pervasive computing&lt;/strong&gt; (smart spaces, invisibility, localized scalability&amp;#8230;)&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h4 id='difference_between_pervasive_and_ubiquitous'&gt;Difference between Pervasive and Ubiquitous:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Pervasive&lt;/strong&gt;: Something that is present or felt throughout a place or thing, computers and operation invisible and transparent to users&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Ubiquitous&lt;/strong&gt;: Computers or computational devices are everywhere but they are not always obvious as they form part of the users environment&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h4 id='context_awareness'&gt;Context awareness:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;State of the user, of the physical environment, of the computing system, history of user-computer interaction&amp;#8230; (Who, what, when, where and possibly why) unpredictable behavior. Key concept of pervasive computing&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Issues&lt;/strong&gt;: data representation, information inference from various sensors, what frequency of update, security, what is minimum level of awareness required, balance between proactive action and user privacy.&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h4 id='volatile_systems'&gt;Volatile systems:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Failures of devices and communications links&lt;/li&gt;

&lt;li&gt;Changes in communications quality (bandwidth, QoS&amp;#8230;)&lt;/li&gt;

&lt;li&gt;Dynamic logical communication links between software components&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h4 id='smart_objects'&gt;Smart Objects:&lt;/h4&gt;

&lt;p&gt;Real world objects are enriched with information processing capabilities. Embedded processors, communication capability, sensors and actuators, remember pertinent events, responsive/proactive&lt;/p&gt;
&lt;br /&gt;
&lt;h4 id='sensors_and_actuators'&gt;Sensors and actuators:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Sensor&lt;/strong&gt;: device generating electronic inputs relating to the environment state&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Actuator&lt;/strong&gt;: electronic and mechanical outputs to control the environment state&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h4 id='sensor_capability'&gt;Sensor capability:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Sensitivity&lt;/strong&gt;: ability to detect small changes&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Accuracy&lt;/strong&gt;: absolute correct values&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Linearity&lt;/strong&gt;: output response is directly proportional to input value&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Hysteresis/latency&lt;/strong&gt;: immediacy of response&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h4 id='agents'&gt;Agents:&lt;/h4&gt;

&lt;p&gt;Software abstraction that can control the system environment using autonomous and reactive behavior. Monitor environment through sensors and responds to control the environment using actuators. Can be made intelligent with proactive behavior and/or can learn from previous behavior.&lt;/p&gt;
&lt;br /&gt;
&lt;h4 id='intelligent_environments'&gt;Intelligent Environments:&lt;/h4&gt;

&lt;p&gt;Environment uses technology transparently and intelligently to improve our experience and quality of life, minimize operating costs (ex: carbon footprint), awareness of privacy and security issues. &lt;strong&gt;Ambient Intelligence&lt;/strong&gt;.&lt;/p&gt;
&lt;br /&gt;
&lt;h4 id='sensor_networks'&gt;Sensor Networks:&lt;/h4&gt;

&lt;p&gt;Geographically distributed network of sensor nodes configured to monitor environment state (temperature, vibration, pressure, GPS position…) each sensor node has communications + microcontroller processor.&lt;/p&gt;
&lt;br /&gt;
&lt;h4 id='motes'&gt;Motes:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Small low cost and low power computer, autonomous wireless sensors, when clustered together could create flexible networks that interact with the environment&lt;/li&gt;

&lt;li&gt;Example: Zig Bee, Sun Spot, Arduino, Raspberry Pi&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h4 id='pervasive_computing_issues'&gt;Pervasive computing issues:&lt;/h4&gt;

&lt;p&gt;take-up (needs to be adopted everywhere to become accepted), interoperability (needs standardization of interface and operation), ambiguity of operation, administration, social issues, security, battery and low power techno, fault tolerance and reliability&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Introduction and Project planning</title>
   <link href="http://thibaultlaurens.github.com/management/2013/03/13/introduction-and-project-planning"/>
   <updated>2013-03-13T00:00:00+00:00</updated>
   <id>http://thibaultlaurens.github.com/management/2013/03/13/introduction-and-project-planning</id>
   <content type="html">&lt;h4 id='project_management'&gt;Project Management&lt;/h4&gt;
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Objective&lt;/strong&gt; :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Primary : Ensuring that projects are delivered within the defined resource constraints&lt;/li&gt;

&lt;li&gt;Secondary: To optimise and minimise the use of available resources&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;Motivation: &lt;strong&gt;Software crisis&lt;/strong&gt;: growth in application size and complexity, 20% useful features VS 64% mostly wasted effort, &lt;strong&gt;project failure&lt;/strong&gt; (lack of project definition, of client involvement, poor quality control and project management)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4 id='project_planning'&gt;Project Planning&lt;/h4&gt;
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;WBS&lt;/strong&gt; (&lt;strong&gt;Work Breakdown Structure&lt;/strong&gt;): Shows hierarchy of project tasks or work products. It forms the framework for a project plan specifying what tasks are needed, but not when the activities will occur. It’s essentially a structured project To-Do list.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;PERT chart&lt;/strong&gt; (&lt;strong&gt;Program Evaluation and Review Technique&lt;/strong&gt; also called &lt;strong&gt;CPM&lt;/strong&gt; – &lt;strong&gt;Critical Path Method&lt;/strong&gt;) or Network diagram: Project schedule, task dependency. Shows the sequence in which activities must be done (dependencies (derived from the WBS)&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Gantt chart&lt;/strong&gt; or Schedule: Stage plan, task VS time. Shows scheduling of work products as a function of time. Useful for planning, scheduling and monitoring a project (derived from the WBS, sync task dependencies with the PERT chart). It can also show resource availability, staff assignment and staff loading.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Estimating task duration:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Qualitative&lt;/strong&gt;: break project into task, assign task to individuals, they estimate time for their own task, apply &lt;strong&gt;fudge factor&lt;/strong&gt; (x2)&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Quantitative&lt;/strong&gt;: Time = (Optimistic time + 4 x Most likely time + Pessimistic time) / 6&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Risk:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Risk management process&lt;/strong&gt;: Risk identification (list of potential risk), Risk analysis (prioritised risk list), Risk planning (risk avoidance and contingency plans), Risk monitoring (risk assessment)&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Risk factors&lt;/strong&gt;: staff change, management change, hardware unavailability, requirements change, specification delay, size underestimate, technology change, product competition…&lt;/li&gt;

&lt;li&gt;Risk Matrix: Used in risk assessment to quantify risk; Matrix of likelihood (&lt;strong&gt;probability&lt;/strong&gt;) VS consequence (&lt;strong&gt;severity&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content>
 </entry>
 
 <entry>
   <title>Relational database and Normalization</title>
   <link href="http://thibaultlaurens.github.com/database/2013/02/28/relational-database-and-normalization"/>
   <updated>2013-02-28T00:00:00+00:00</updated>
   <id>http://thibaultlaurens.github.com/database/2013/02/28/relational-database-and-normalization</id>
   <content type="html">&lt;p&gt;In relational database design, the normalization objective is to check whether or not a relationship fill the prerequisites for a given normal form. This will automatically minimize redundancy and anomalies in insertion, deletion and update.&lt;/p&gt;

&lt;p&gt;There is 4 basics and commonly used normal forms : &lt;strong&gt;first (1NF), second (2NF), third (3NF) and Boyce-Codd (BCNF)&lt;/strong&gt; normal forms.&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id='first_normal_form'&gt;First Normal Form&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;1NF&lt;/strong&gt; makes reference to the concept of &lt;strong&gt;atomicity&lt;/strong&gt; : Table represents a relation in which intersection of each row and column contains one and only one value.&lt;/p&gt;
&lt;br /&gt;
&lt;h4 id='second_normal_form'&gt;Second Normal Form&lt;/h4&gt;

&lt;p&gt;A &lt;strong&gt;2NF&lt;/strong&gt; is a 1NF with every non primary key attribute is fully &lt;strong&gt;functionally dependent&lt;/strong&gt; on the primary key. This involves identifying partial dependencies on the primary key and removing them by creating a new relation.&lt;/p&gt;
&lt;br /&gt;
&lt;h4 id='third_normal_form'&gt;Third Normal Form&lt;/h4&gt;

&lt;p&gt;A &lt;strong&gt;3NF&lt;/strong&gt; is a 2NF based on the concept of &lt;strong&gt;transitive dependency&lt;/strong&gt; (attributes A-&amp;gt;B and B-&amp;gt;C therefore A-&amp;gt;C). Like in 2NF, this involves identifying transitive dependencies on the primary key and removing them by creating a new relation.&lt;/p&gt;
&lt;br /&gt;
&lt;h4 id='boycecodd_normal_form'&gt;Boyce-Codd Normal Form&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;BCNF&lt;/strong&gt; makes reference to the concept of &lt;strong&gt;functional dependency&lt;/strong&gt; and &lt;strong&gt;candidate key&lt;/strong&gt; (the minimal superkey for the relation). In BCNF, every determinant has to be a candidate key. If the relation has functional dependencies where determinants are not candidate keys we have to remove them and create a new relation with a copy of their determinant. A 3NF relation with only one candidate key is automatically in BCNF.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;A good relational model should be at least in 2NF, higher normal forms has their pros and cons. After 3NF, access time could be longer (we can fix this problem with Index on primary key) and the database structure could be difficult to maintain. But, you ensure non redondant and inconsistent data. The best things to do is to choose the level of normalization over the type of access : if data are more often edited than readed you should normalize as much as possible. Otherwise, if data are more often readed, then you should probably denormalize a little bit to improve data access, but keep in mind that redundancy can increase the amount of data and, in the end push down performances.&lt;/p&gt;

&lt;p&gt;Note: 1NF, 2NF, 3NF and BCNF focus on eliminating data redundancies based on undesirable functional dependencies. The are other normal forms after BCNF : &lt;strong&gt;Fourth (4NF), Fifth (5NF), Domain/Key (DKNF) and Sixth (6NF)&lt;/strong&gt; normal forms wich are focus on other things like multivalued dependency (4NF) or joind dependency implied by candidate keys (5NF).&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Web services</title>
   <link href="http://thibaultlaurens.github.com/middleware/2013/02/19/web-services"/>
   <updated>2013-02-19T00:00:00+00:00</updated>
   <id>http://thibaultlaurens.github.com/middleware/2013/02/19/web-services</id>
   <content type="html">&lt;h4 id='definition'&gt;Definition&lt;/h4&gt;

&lt;p&gt;A platform and implementation dependant software component that can be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Described&lt;/strong&gt; using a service description language&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Published&lt;/strong&gt; to a registry of services&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Discovered&lt;/strong&gt; through standard mecanism&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Invoked&lt;/strong&gt; through a declared API, usually over a network, and composed with other service.&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h4 id='soap_structure'&gt;SOAP Structure&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SOAP envelope&lt;/strong&gt;: express what is in a message, who should deal with it and whether it is optional or mandatory.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;SOAP encoding rule&lt;/strong&gt;: defines serialization mechanism for exchanging instances of application definded data types.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;SOAP RPC representation&lt;/strong&gt;: defines convention for representing remote procedure calls and responses.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;SOAP binding&lt;/strong&gt;: defines convention for exchanging SOAP envelopes between peers using underlying transport protocol.&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h4 id='wsdl_web_service_definition_language'&gt;WSDL (Web Service Definition Language)&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Interface&lt;/strong&gt;: Element describes what fonctionality the web service provides.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Binding&lt;/strong&gt;: Element describes how to access the web service.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Service&lt;/strong&gt;: Element describes where to access the web service.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Operation&lt;/strong&gt;: associates message exchange pattern with one or more messages, input, output =&amp;gt; on interface, binding and service.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Endpoint&lt;/strong&gt;: &lt;strong&gt;ABC&lt;/strong&gt; Address, Binding, Contract&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h4 id='rest_representational_state_transfer'&gt;REST (Representational State Transfer)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Methods&lt;/strong&gt;: Options, Get, Head, Post, Put, Delete, Trace, Connect&lt;br /&gt;&lt;strong&gt;RESTful&lt;/strong&gt; web services works out the data model and split it into resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;name the resource with URI&lt;/li&gt;

&lt;li&gt;expose a subset of the uniform interface&lt;/li&gt;

&lt;li&gt;design the representation accepted from the client&lt;/li&gt;

&lt;li&gt;design the representation served to the client&lt;/li&gt;

&lt;li&gt;integrate into existing resources, using hypermdedia links and forms&lt;/li&gt;
&lt;/ul&gt;</content>
 </entry>
 
 <entry>
   <title>Ruby: tips, tricks and bytecode analysis</title>
   <link href="http://thibaultlaurens.github.com/ruby/2013/02/11/ruby-tips-tricks-and-deep-analysis"/>
   <updated>2013-02-11T00:00:00+00:00</updated>
   <id>http://thibaultlaurens.github.com/ruby/2013/02/11/ruby-tips-tricks-and-deep-analysis</id>
   <content type="html">&lt;h4 id='my_personal_experience_with_ruby'&gt;My personal experience with Ruby&lt;/h4&gt;

&lt;p&gt;Basically I am not a Ruby developer: it means I never pushed to production any code written in Ruby but it doesn’t mean I don’t like to play with it. For now I wrote two programs in Ruby, two web applications (with the help of the excellent MVC framework Ruby on Rails) for university projects.&lt;/p&gt;

&lt;p&gt;The source code of these two projects can be found on Github:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;LaFourchette2012&lt;/strong&gt; (&lt;a href='https://github.com/ThibaultLaurens/La_Fourchette_2012' target='_blank' title='github.com/ThibaultLaurens/La_Fourchette_2012'&gt;source code&lt;/a&gt;) written with four friends, this web application could be used to manage a restaurant’s chain (restaurants, customers &amp;amp; orders, waiters, cookers, payment, bill…). It has a nice “no-refresh” client interface written with &lt;strong&gt;BackboneJS&lt;/strong&gt; and an admin panel.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;TraditOnRails&lt;/strong&gt; (&lt;a href='https://github.com/ThibaultLaurens/TraditOnRails' target='_blank' title='github.com/ThibaultLaurens/TraditOnRails'&gt;source code&lt;/a&gt;) a more recent project is a basic fictitious trading application with fictitious currencies stored in a &lt;strong&gt;MongoDB&lt;/strong&gt; database. One characteristic of this project is that it uses a &lt;strong&gt;Node.JS&lt;/strong&gt; server and shows real-time updates of currencies rate with the help of &lt;strong&gt;socket.io&lt;/strong&gt; and a nice graph.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Oh and by the way, I should mention that this blog is written with &lt;strong&gt;Jekyll&lt;/strong&gt; so once again: RUBY please!&lt;/p&gt;

&lt;p&gt;So let’s first have a look at what is Ruby and at some details of the syntax that may surprise when you come from a C based programming language.&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id='what_is_ruby'&gt;What is Ruby?&lt;/h4&gt;

&lt;p&gt;The ruby language is by definition &lt;strong&gt;a minimalist and natural language&lt;/strong&gt; which is, I think, a very good thing for software development. It is also a &lt;strong&gt;dynamic object oriented&lt;/strong&gt; language with &lt;strong&gt;multiple programming paradigms&lt;/strong&gt; like imperative, functional or reflective. It was first written in C as a single-pass interpreted language and was designed for &lt;strong&gt;programmer productivity and fun&lt;/strong&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id='what_surprised_me_so_far_in_ruby'&gt;What surprised me so far in Ruby&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Single line comments are declared with a &lt;strong&gt;#&lt;/strong&gt; and multi-line comments are declared with &lt;strong&gt;=begin&lt;/strong&gt; and &lt;strong&gt;=end&lt;/strong&gt; (this is strange right?)&lt;/li&gt;

&lt;li&gt;Ruby doesn’t use curly brace to separate functions and set variable scope but use &lt;strong&gt;indentation&lt;/strong&gt; (not exactly in the same way that the cousin Python) and the keyword &lt;strong&gt;end&lt;/strong&gt; in the end of a code block&lt;/li&gt;

&lt;li&gt;A variable will be automatically scoped into its block of code: classes and modules provide shelter from the global scope.&lt;/li&gt;

&lt;li&gt;It uses &lt;strong&gt;Bloks&lt;/strong&gt; to iterate on array like for example array.all?{|n| n &amp;gt; 4}, a.keep_if{|n| n&amp;gt;1}&lt;/li&gt;

&lt;li&gt;It has multiple types for function such as Blocks and lambdas. Blocks is the most common way to use &lt;a href='http://www.skorks.com/2010/05/closures-a-simple-explanation-using-ruby/' target='_blank' title='skorks.com/2010/05/closures-a-simple-explanation-using-ruby/'&gt;&lt;strong&gt;closure&lt;/strong&gt;&lt;/a&gt; (concept from the Scheme language) in Ruby and is one of the most powerful feature of Ruby, it allows the developer to pass code to &lt;strong&gt;iterators&lt;/strong&gt; such as each, detect or inject. (I should also say that Ruby extends the concept of block into a new one called &lt;a href='http://www.ruby-doc.org/core-1.9.3/Proc.html' target='_blank' title='ruby-doc.org/core-1.9.3/Proc.html'&gt;Proc&lt;/a&gt; which is &lt;strong&gt;first class citizen&lt;/strong&gt; and can be simply created by adding Proc.new in a block.)&lt;/li&gt;
&lt;/ul&gt;
&lt;script src='https://gist.github.com/ThibaultLaurens/4751477.js?file=block.rb'&gt; &lt;/script&gt;
&lt;p&gt;Example of a Block in Rails: The code on the left side of the “do” will interact with the variable inside the two pipes on its right side.&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id='how_it_works_under_the_hood'&gt;How it works under the hood?&lt;/h4&gt;

&lt;p&gt;One thing the university teach me is that you can’t learn a new programming language if you don’t see how it works under the hood. So, let’s go a little deeper inside Ruby!&lt;/p&gt;

&lt;p&gt;The actual version of Ruby, Ruby 1.9, uses &lt;strong&gt;YARV&lt;/strong&gt; (&lt;a href='http://en.wikipedia.org/wiki/YARV' target='_blank' title='wikipedia.org/wiki/YARV'&gt;Yet another Ruby VM&lt;/a&gt;, also called &lt;strong&gt;KRI&lt;/strong&gt;) which is a &lt;strong&gt;bytecode interpreter&lt;/strong&gt;. YARV was designed to reduce the execution time of Ruby programs.&lt;br /&gt;When a ruby program is executed, the first step will be to generate YARV instructions. In order to achieve this step, the code is first &lt;strong&gt;tokenized&lt;/strong&gt;, then tokens are grouped into Ruby statements: it’s the &lt;strong&gt;parsing&lt;/strong&gt;. Finally these statements are compiled into low level &lt;strong&gt;YARV instructions&lt;/strong&gt;.&lt;br /&gt;Ruby doesn’t use &lt;strong&gt;Yacc&lt;/strong&gt; (&lt;a href='http://en.wikipedia.org/wiki/Yacc' target='_blank' title='wikipedia.org/wiki/Yacc'&gt;Yet Another Compiler Compiler&lt;/a&gt;) as &lt;strong&gt;parser generator&lt;/strong&gt; but &lt;a href='http://en.wikipedia.org/wiki/GNU_bison' target='_blank' title='wikipedia.org/wiki/GNU_bison'&gt;Bison&lt;/a&gt;. The parser code is processed at the &lt;strong&gt;build time&lt;/strong&gt; of Ruby and not at the run time of the program.&lt;br /&gt;The second step is to run YARV instructions. YARV possess low level structures. It has for instance two instructions called &lt;strong&gt;branchif&lt;/strong&gt; and &lt;strong&gt;branchunless&lt;/strong&gt; (which can be understand has low level if and unless Ruby statement) and a low level function called &lt;strong&gt;jump&lt;/strong&gt; in order to change the program counter and move into the compiled program.&lt;/p&gt;

&lt;p&gt;For example, this if/else statement in Ruby…&lt;/p&gt;
&lt;script src='https://gist.github.com/ThibaultLaurens/4751477.js?file=login.rb'&gt; &lt;/script&gt;&lt;br /&gt;
&lt;p&gt;(OK now hold your breath just a few seconds&amp;#8230; and go!)&lt;/p&gt;

&lt;p&gt;… corresponds to these YARV instructions:&lt;/p&gt;
&lt;script src='https://gist.github.com/ThibaultLaurens/4751477.js?file=yarv.rb'&gt; &lt;/script&gt;
&lt;p&gt;One thing or two about this code:&lt;/p&gt;

&lt;p&gt;In line 0077, the getlocal instruction will leave a true or false value on the stack. Then, if the condition is false (does the user exist?), the branchunless line 0079 will jump to the line 131 where the else is defined (or should be defined, it looks like my Ruby console didn’t want me to see it!), to jump the if. If the condition is true, the code just after the brancheunless will be compiled and then a jump instruction line 0129 will jump to the end of the method to skip the else.&lt;/p&gt;

&lt;p&gt;About the first line, it starts with &lt;strong&gt;local table&lt;/strong&gt;. In fact, this is because Ruby encapsulates the execution of code by block. This series of bytecode instructions are specific to this if/else block. A block in Ruby is like a &lt;strong&gt;closure&lt;/strong&gt;. It’s composed by a function to be executed (here the bytecode, internally it’s an &lt;strong&gt;instruction sequence pointer&lt;/strong&gt;) and an environment which is a &lt;strong&gt;dynamic frame pointer&lt;/strong&gt; (which points right to the &lt;strong&gt;stack&lt;/strong&gt;). In addition, a block can have an object environment. Internally Ruby represent a block using a &lt;strong&gt;C structure&lt;/strong&gt; called &lt;strong&gt;rb_block_t&lt;/strong&gt;. YARV creates object with &lt;strong&gt;RObject&lt;/strong&gt; structures which contains a &lt;strong&gt;klass&lt;/strong&gt; pointer to the class and an &lt;strong&gt;ivptr (instance variable pointer)&lt;/strong&gt; which points to an array of instance variable of the object.&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id='the_best_is_to_see_under_a_microscope'&gt;The best is to see under a microscope&lt;/h4&gt;

&lt;p&gt;That’s all for now with Ruby but if you like this kind of things I may suggest you to read the &lt;strong&gt;excellent book&lt;/strong&gt; of &lt;strong&gt;Pat Shaughnessy&lt;/strong&gt; &lt;a href='http://patshaughnessy.net/ruby-under-a-microscope' target='_blank' title='patshaughnessy.net/ruby-under-a-microscope'&gt;&lt;strong&gt;Ruby Under a Microscope&lt;/strong&gt;&lt;/a&gt; &lt;div&gt;
    &lt;img alt='Ruby!' src='/assets/themes/foundation/images/post/11-02-13-ruby/ruby.jpg' /&gt;
&lt;/div&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>The component paradigm</title>
   <link href="http://thibaultlaurens.github.com/middleware/2013/02/06/the-component-paradigm"/>
   <updated>2013-02-06T00:00:00+00:00</updated>
   <id>http://thibaultlaurens.github.com/middleware/2013/02/06/the-component-paradigm</id>
   <content type="html">&lt;h4 id='componentbased_middleware'&gt;Component-based middleware&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Component&lt;/strong&gt;: A run-time entity that complient applications and other components can use.&lt;/li&gt;

&lt;li&gt;Two general types: &lt;strong&gt;standalone&lt;/strong&gt; and &lt;strong&gt;distributed&lt;/strong&gt;&lt;/li&gt;

&lt;li&gt;Example: Javabeans, CORBA component model&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h4 id='key_concepts'&gt;Key concepts:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Interface&lt;/strong&gt;: Point of service.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Receptacle&lt;/strong&gt;: describes service requirements.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Connection&lt;/strong&gt;: binds interface and receptacle of the same type.&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h4 id='reflective_middleware'&gt;Reflective middleware&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;strong&gt;reflective system&lt;/strong&gt; provides a representation of its own behaviour which is causally connected to underlying behaviour ( &lt;strong&gt;CCSR&lt;/strong&gt;: Causally Coonected Self Representation).&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Reflective middleware&lt;/strong&gt; is a middleware system that provides inspection and adaptation of behaviour through an appropriate CCSR.&lt;/li&gt;

&lt;li&gt;CCSR in Java like language can be class loader, garbage collection and method dispatcher.&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h4 id='open_overlays'&gt;Open Overlays&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Next generation of grid application.&lt;/li&gt;

&lt;li&gt;Many interaction paradigms (publish-subscribe, multicast, RPC, message passing etc.).&lt;/li&gt;

&lt;li&gt;Operate with and accros many heterogeneous network types.&lt;/li&gt;

&lt;li&gt;Wide range of device types from supercomputers to sensor nodes.&lt;/li&gt;
&lt;/ul&gt;</content>
 </entry>
 
 <entry>
   <title>Peer to Peer</title>
   <link href="http://thibaultlaurens.github.com/middleware/2013/02/01/peer-to-peer"/>
   <updated>2013-02-01T00:00:00+00:00</updated>
   <id>http://thibaultlaurens.github.com/middleware/2013/02/01/peer-to-peer</id>
   <content type="html">&lt;h4 id='definition'&gt;Definition&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;High degree of decentralization&lt;/strong&gt;: Peers implement both client and server functionality, most of system state dynamically allocated among peers.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Self-organization&lt;/strong&gt;: Once a node is distributed, a little or no manual configuration required.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Low barrier to deployment&lt;/strong&gt;: Low upfront investment.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Organic growth&lt;/strong&gt;: Resources contributed by participating nodes.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Resilience to faults and attacks&lt;/strong&gt;: Few, if any, node&amp;#8217;s critical to system operation.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Abundance and diversity of resources&lt;/strong&gt;: Few organization can afford: divers hardware, software, network access, power supply ..&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h4 id='application'&gt;Application&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SETI@HOME&lt;/strong&gt;: volounteer computing, users donate spare CPU cycles.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;BBC&lt;/strong&gt;: Iplayer, streaming media, exploit bandwith of clients to avoid bandwith cost of server based solutions.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;BitTorrent&lt;/strong&gt;: Sharing and distributing files.&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h4 id='how_it_works'&gt;How it works?&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Overlay network&lt;/strong&gt;: Computer network built on top of another network. Nodes connected by virtual links, each is a path, possibly through many nodes in the underlying network.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Key challenge&lt;/strong&gt;: To build an overlay network with routing capability that works well in presence of high membership turnover.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Characteristic&lt;/strong&gt;: Degree of centralization, overlay maintenance, distributed state, distributed coordination.&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h4 id='degree_of_centralization'&gt;Degree of centralization&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Presence or absence of centralized components in system design&lt;/li&gt;

&lt;li&gt;Partially centralized system have a dedicated node controller maintaining set of participating nodes&lt;/li&gt;

&lt;li&gt;Decentralized system has no dedicated nodes critical to operation of the system but some has supernodes (highly available) which store state, keep indices of available content, act like a rendez-vous point.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4 id='unstructured_overlays'&gt;Unstructured overlays&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;No constraints on links between different nodes and hence no particular structure to the overlay.&lt;/li&gt;

&lt;li&gt;New node performs random walkthrough overlay to find place to join&lt;/li&gt;

&lt;li&gt;Minimum chosen to maintain connectivity in case of failure.&lt;/li&gt;

&lt;li&gt;Maximum set to bound overhead of maintaining links.&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h4 id='structured_overlays'&gt;Structured overlays&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Each node has a unique ID chosen so they are uniformly distributed in that spaces. Overlay graph has a specific structure. The ID determines the position in the structure and contains its sets of links.&lt;/li&gt;

&lt;li&gt;Use of key to assign responsabilities: one key is mapped to one node. &lt;strong&gt;KBR&lt;/strong&gt;, &lt;em&gt;key based routing&lt;/em&gt;, with a starting node and a key. KBR gives the path to the node responsible for the key.&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h4 id='content_in_unstructured_overlays'&gt;Content in unstructured overlays&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Object stored at node that inserted the object, as well as at node that subsequently download the object.&lt;/li&gt;

&lt;li&gt;Controller node maintains list of what is where.&lt;/li&gt;

&lt;li&gt;Queries are directed to controller which responds with lists of nodes where object may be found.&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h4 id='content_in_structured_overlays'&gt;Content in structured overlays&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Object stored at node that inserted the object, as well as at node that subsequently download the object.&lt;/li&gt;

&lt;li&gt;Querying node floods request message through the overlay specifying object by key, keywords, metadata..&lt;/li&gt;

&lt;li&gt;Node that has matching object (or pointer) responds.&lt;/li&gt;

&lt;li&gt;Scope of floods often limited, to trade recall for overhead.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4 id='chord'&gt;Chord&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Efficient by locating a node that stores a particular object.&lt;/li&gt;

&lt;li&gt;Distributed lookup protocol with one operation: maps keys to node + a finger table&lt;/li&gt;

&lt;li&gt;With n nodes, each nodes maintains only informations about log(n) nodes and resolves lookup via log(n) messages to other nodes, join or leave requires log2(n) messages.&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h4 id='pastry'&gt;Pastry&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Each node is assigned a node ID (128 bits) chosen randomly, assumed to be uniformly distributed.&lt;/li&gt;

&lt;li&gt;Identifies node&amp;#8217;s position in a circular spaces 0 to 2^128 - 1&lt;/li&gt;

&lt;li&gt;Message and node ID share prefix (messages are routed to node ID closer message key).&lt;/li&gt;

&lt;li&gt;Each nodes maintain a routing table, neighbourhood set and leaf set.&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h4 id='scribe'&gt;Scribe&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Based on Pastry, publish-subscribe.&lt;/li&gt;

&lt;li&gt;Subscribers register interest in a topic or pattern of events.&lt;/li&gt;

&lt;li&gt;Asynchronously receive events matching their interests.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4 id='dht_distributed_hash_table_threat_in_security'&gt;DHT (Distributed Hash Table) threat in security&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Incorrect lookup routing.&lt;/li&gt;

&lt;li&gt;Incorrect routing update.&lt;/li&gt;

&lt;li&gt;Partitionning&lt;/li&gt;
&lt;/ul&gt;</content>
 </entry>
 
 <entry>
   <title>Relational algebra and SQL syntax</title>
   <link href="http://thibaultlaurens.github.com/database/2013/01/24/relational-algebra-and-sql-syntax"/>
   <updated>2013-01-24T00:00:00+00:00</updated>
   <id>http://thibaultlaurens.github.com/database/2013/01/24/relational-algebra-and-sql-syntax</id>
   <content type="html">&lt;h4 id='relational_algebra_operators'&gt;Relational algebra operators&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Selection&lt;/strong&gt;, [σ], selects rows from a table.&lt;br /&gt;Example: σ Firstname = &amp;#8216;Thibault&amp;#8217;(STUDENT)&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Projection&lt;/strong&gt;, [π], projects out columns from a table.&lt;br /&gt;Example: π Firstname(STUDENT)&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Renaming&lt;/strong&gt;, [ρ], can be used to rename tables.&lt;br /&gt;Example: ρ Firstname &amp;lt;- Name(STUDENT)&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Cartesian product&lt;/strong&gt;, [x], of two relations (tables) consists of all the tuples of the first, combined in all possible ways with the tuples of the second.&lt;br /&gt;Example: A x B = {&amp;lt; a,b &amp;gt;: for all a,b aEA and bEB}&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Natural Join&lt;/strong&gt;, [∞], matches up corresponding attributes (attributes with the same names and values) in two tables. The result is a table in which no two attributes have the same name.&lt;br /&gt;Example: Employee ∞ Department&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Division&lt;/strong&gt;, [%], restricts attributes names uniqueness of a table, for which it holds that all their combinations with another table are present in the first one.&lt;br /&gt;Example: Employee % Department&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Union&lt;/strong&gt;, [∪], of a collection of sets is the set of all distinct elements in the collection.&lt;br /&gt;Example: A ∪ B = {x: xEA or xEB}&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Intersection&lt;/strong&gt;, [∩], of two sets A and B is the set that contains all elements of A that also belong to B but no other elements.&lt;br /&gt;Example: A ∩ B = {x: xEA and xEB}&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Set Difference&lt;/strong&gt;, [\], of U and A (U\A) is the set of all members of U that are not members of A (also called relative complement) Example: U\A = {xEU | x!EA}&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4 id='sql_syntax'&gt;SQL Syntax&lt;/h4&gt;
&lt;script src='https://gist.github.com/4586266.js'&gt; &lt;/script&gt;</content>
 </entry>
 
 <entry>
   <title>Cloud and Grid computing</title>
   <link href="http://thibaultlaurens.github.com/middleware/2013/01/17/cloud-and-grid-computing"/>
   <updated>2013-01-17T00:00:00+00:00</updated>
   <id>http://thibaultlaurens.github.com/middleware/2013/01/17/cloud-and-grid-computing</id>
   <content type="html">&lt;h4 id='cloud_grid_and_cluster'&gt;Cloud, Grid and Cluster&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;They are all &lt;strong&gt;parallel&lt;/strong&gt; or &lt;strong&gt;distributed&lt;/strong&gt; system.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Cluster&lt;/strong&gt;: Collection of interconnected stand-alone computers with single administration.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Grid&lt;/strong&gt;: Allows sharing and aggregation of geographically distributed autonomous resources, dynamically at runtime. May involve multiple administration domain.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Cloud&lt;/strong&gt;: Collection of interconnected virtualised computers that are dynamically provisioned as one or more unified computing resource, based on a negociated SLA.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4 id='cloud'&gt;Cloud&lt;/h4&gt;
&lt;br /&gt;
&lt;h5 id='components'&gt;Components&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Client&lt;/strong&gt;: The end used, usually a thin client.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Service&lt;/strong&gt;: Cloud computing functionality.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Application&lt;/strong&gt;: Client purchased used of cloud service.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Platform&lt;/strong&gt;: Cloud middleware launching client application.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Storage&lt;/strong&gt;: File server and other resources used for client data.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Infrastructure&lt;/strong&gt;: Cloud control and operation for service provision.&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h5 id='key_technologies'&gt;Key technologies&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Web 2.0&lt;/strong&gt;: Use the web for service participation.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Broadband networking&lt;/strong&gt;&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;SOA&lt;/strong&gt;: Client-server development model based on interoperable software services.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Virtualisation&lt;/strong&gt;: Hosting of multiple logical operating systems, each sharing the available resources.&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h5 id='hosting'&gt;Hosting&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Remote&lt;/strong&gt;: Service is hosted on remote infrastructure.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Ubiquitous&lt;/strong&gt;: Service is available from many providers.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Commodified&lt;/strong&gt;: Utility computing model; client pays for what and how much service used.&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h5 id='customer_choice'&gt;Customer choice&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Advantages&lt;/strong&gt;: Buy service, not hardware and software; pay for and used only what is needed; scalable, available, transparent.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Disadvantages&lt;/strong&gt;: Cost of service; restricted to services that are available; dependency on third party for maintenance; privacy issue.&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h5 id='deployment_model'&gt;Deployment model&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Internal (private) cloud&lt;/strong&gt;: Operated only within an organization.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Community cloud&lt;/strong&gt;: Jointly owned by several organization as a community.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Public cloud&lt;/strong&gt;: Owned by an organization selling services to outsiders.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Hybrid&lt;/strong&gt;: Composition of two or more private, public or community cloud working together to provide a single service.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Cloud storage&lt;/strong&gt;: Large cloud providers now hire data storage.&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h5 id='types'&gt;Types&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;IaaS&lt;/strong&gt; (&lt;em&gt;Infrastructure as a Service&lt;/em&gt;): Access to computer hardware over the internet; lease of servers, sofware, databases, hardware etc. as an outsourced service. Example: Dropbox, Amazon Web Services.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;PaaS&lt;/strong&gt; (&lt;em&gt;Platform as a Service&lt;/em&gt;): Use web based tools to develop application to run remotly. Example: Windows Azure, Google App Engine.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;SaaS&lt;/strong&gt; (&lt;em&gt;Software as a Service&lt;/em&gt;): Access to application running remotely, can provide communication security, monitoring etc. Example: Salesforce, Hotmail.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4 id='grid'&gt;Grid&lt;/h4&gt;
&lt;br /&gt;
&lt;h5 id='key_concepts'&gt;Key concepts&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Virtual organization&lt;/strong&gt;: People and resources collaborating accros admin and organization boundaries.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Grid middleware&lt;/strong&gt;: Running on each resources to interface to the grid; providing specific service.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Single virtual computer&lt;/strong&gt;: User just perceives &amp;#8220;shared resources&amp;#8221; without concern for location or owning organization; Issues: heterogeneity, scalability, reliability, computing model, access control.&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h5 id='features'&gt;Features&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Resources sharing&lt;/strong&gt;: Computers, storage, sensors, network; heterogeneity of device, mechanism policy; conditional sharing.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Coordinated problem solving&lt;/strong&gt;: Integration of distributed resources, compound quality of service requierements.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Dynamic, multi-institutional virtual organization&lt;/strong&gt;: Dynamic overlays on classic organizational structure.&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h5 id='scales'&gt;Scales&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Department Grid&lt;/strong&gt; (cluster)&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Enterprise Grid&lt;/strong&gt; (example: CERN)&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Global Grid&lt;/strong&gt; (example: NGS)&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h5 id='types'&gt;Types&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Computational&lt;/strong&gt;: Provides computational services (most common).&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Data&lt;/strong&gt;: Provides computational access to large (possibly distributed) datasets from multiple storage systems.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Collaboration&lt;/strong&gt;: Designed to facilitate collaborative computation.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Network&lt;/strong&gt;: Provides fault tolerant high performance communication to facilitate computation.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Utility&lt;/strong&gt;: Computational resources accessed on demand.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Cluster&lt;/strong&gt;: Smaller grid, operating localy.&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h5 id='components'&gt;Components&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Resources&lt;/strong&gt;: Networking, computers, data storage, instruments..&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Grid middleware&lt;/strong&gt;: The operating system of the grid.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Operations infrastructure&lt;/strong&gt;: Runs enabling services.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Virtual organization management&lt;/strong&gt;: Procedures for gaining access to resources.&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h5 id='middleware'&gt;Middleware&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Distributed services and operating system to allow authorised Grid users access to required access.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Gridware&lt;/strong&gt; includes authentication, negociation of resources access, distributed load balancing, accounting with multiple domains etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h5 id='architecture'&gt;Architecture&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Applications&lt;/strong&gt;: Climatology, cosmology, high energy physics.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Application toolkits&lt;/strong&gt;: Data grid, computational grid, collaborative grid.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Grid services&lt;/strong&gt;: Protocols, authentication, resource management.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Grid fabric&lt;/strong&gt;: Disk, network, processor.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4 id='cluster'&gt;Cluster&lt;/h4&gt;
&lt;br /&gt;
&lt;h5 id='types'&gt;Types&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Non-dedicated&lt;/strong&gt; (network of workstation): Usage of spare workstation, frequently serial communication between workstations, individual owners of workstations.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Dedicated&lt;/strong&gt; (supercomputer): High performance, parallel communication between workstation nodes, parallel computing.&lt;/li&gt;
&lt;/ul&gt;</content>
 </entry>
 
 <entry>
   <title>Generics with C#</title>
   <link href="http://thibaultlaurens.github.com/microsoft/2013/01/12/generics-with-csharp"/>
   <updated>2013-01-12T00:00:00+00:00</updated>
   <id>http://thibaultlaurens.github.com/microsoft/2013/01/12/generics-with-csharp</id>
   <content type="html">&lt;p&gt;The most important new feature of C# 2.0 (which was released in 2005) is &lt;strong&gt;generics&lt;/strong&gt;. Understanding how they are implemented is essential to understand advances and key features they will bring later to C# and the .NET framework (like &lt;strong&gt;LINQ&lt;/strong&gt; for example).&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;em&gt;What are generics?&lt;/em&gt;&lt;br /&gt; Also called parametric polymorphism, generics consists in declaring a type with a type parameter that will be instantiated when it will be needed. It adds a great flexibility to the language.&lt;br /&gt; In C#, you can declare generics with the help of &lt;strong&gt;&amp;lt; T &amp;gt;&lt;/strong&gt; where T is the parameterized type. Classes, interfaces, methods, properties and delegates can be defined. The exemple below declares a generic simplified version of the List&amp;lt; T &amp;gt; class (available in the .NET framework)&lt;/p&gt;
&lt;script src='https://gist.github.com/4461585.js?file=list.cs'&gt; &lt;/script&gt;
&lt;p&gt;Then, this List&amp;lt; T &amp;gt; can be used by adding objects to the list and using methods of the list.&lt;/p&gt;
&lt;script src='https://gist.github.com/4461585.js?file=program.cs'&gt; &lt;/script&gt;
&lt;p&gt;An important thing to keep in mind is that parameterized objects has to have &lt;strong&gt;the same type&lt;/strong&gt;. If another class is created, an object of this second class cannot be added to the &lt;em&gt;CarList&lt;/em&gt;.&lt;br /&gt;Generic with multiple parameterized types can also be declared, in this example a &lt;strong&gt;List&amp;lt; T, U &amp;gt;&lt;/strong&gt; could be declared.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Constraints&lt;/strong&gt; can be added to generics through the &lt;strong&gt;“where”&lt;/strong&gt; keyword. It consists in declaring restriction about the parameterized type. For instance, the parameterized type has to be a reference type or it has to derive from a specific class. These constraints avoid compile-time errors. For more information on constraints on type parameters check the C# programming guide on the &lt;a href='http://msdn.microsoft.com/en-us/library/d5x73970.aspx' target='_blank' title='msdn.microsoft.com/en-us/library/d5x73970.aspx'&gt;msdn website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The website list 6 differents type of constraints:&lt;/p&gt;
&lt;table class='responsive'&gt;
              &lt;tbody&gt;
              &lt;tr&gt;
                &lt;th&gt;&lt;p&gt;&lt;strong&gt;Constraint&lt;/strong&gt;&lt;/p&gt;&lt;/th&gt;
                &lt;th&gt;&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;&lt;/th&gt;
              &lt;/tr&gt;
              &lt;tr&gt;
                &lt;td&gt;&lt;p&gt;where T: struct&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;
                  &lt;p&gt;The type argument must be a value type. Any value type except Nullable can be specified.&lt;/p&gt;
                &lt;/td&gt;
              &lt;/tr&gt;
              &lt;tr&gt;
                &lt;td&gt;&lt;p&gt;where T : class&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;
                  &lt;p&gt;The type argument must be a reference type; this applies also to any class, interface, delegate, or array type.&lt;/p&gt;
                &lt;/td&gt;
              &lt;/tr&gt;
              &lt;tr&gt;
                &lt;td&gt;&lt;p&gt;where T : new()&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;
                  &lt;p&gt;The type argument must have a public parameterless constructor. When used together with other constraints, the &lt;span&gt;&lt;span class='input'&gt;new()&lt;/span&gt;&lt;/span&gt; constraint must be specified last.&lt;/p&gt;
                &lt;/td&gt;
              &lt;/tr&gt;
              &lt;tr&gt;
                &lt;td&gt;&lt;p&gt;where T : &amp;lt;base class name&amp;gt;&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;
                  &lt;p&gt;The type argument must be or derive from the specified base class.&lt;/p&gt;
                &lt;/td&gt;
              &lt;/tr&gt;
              &lt;tr&gt;
                &lt;td&gt;&lt;p&gt;where T : &amp;lt;interface name&amp;gt;&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;
                  &lt;p&gt;The type argument must be or implement the specified interface. Multiple interface constraints can be specified. The constraining interface can also be generic.&lt;/p&gt;
                &lt;/td&gt;
              &lt;/tr&gt;
              &lt;tr&gt;
                &lt;td&gt;&lt;p&gt;where T : U&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;
                  &lt;p&gt;The type argument supplied for T must be or derive from the argument supplied for U. &lt;/p&gt;
                &lt;/td&gt;
              &lt;/tr&gt;
            &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The example below shows a generic class declaration where the parameterized type has to implement a specific interface.&lt;/p&gt;
&lt;script src='https://gist.github.com/4461585.js?file=generic.cs'&gt; &lt;/script&gt;
&lt;p&gt;We obtained an error with types that don’t implement “ICustomInterface” like string.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;The C# design team made the choice to integrate generics directly &lt;strong&gt;into the CLR&lt;/strong&gt; in order to avoid some problem seen in Java (Java doesn&amp;#8217;t integrate generics in the JVM and uses type erasure) but also, to guarantee cross language compatibility through the .NET framework. C# use &lt;strong&gt;reification&lt;/strong&gt; for generics and it results in a complete synchronisation between the compile time and the runtime. In other words, generics instantiation appends at runtime and this is only possible because the IL code produce by the CLR is totally type neutral. Have a look at this excellent &lt;a href='http://broadcast.oreilly.com/2009/03/an-interview-with-anders-hejls.html' target='_blank' title='broadcast.oreilly.com/2009/03/an-interview-with-anders-hejls'&gt;interview with Anders Hejlsberg&lt;/a&gt; (lead architect of C#, but also author of Turbo Pascal and chief architect of Delphi).&lt;/p&gt;

&lt;p&gt;The example below shows a generic list of string and how its type information is preserved in the &lt;strong&gt;IL code&lt;/strong&gt;:&lt;/p&gt;
&lt;script src='https://gist.github.com/4461585.js?file=generic.il'&gt; &lt;/script&gt;
&lt;ul&gt;
&lt;li&gt;It can be noticed here the genericity of the IL code. The “ldarg” instruction for instance (line 5, IL_0000) which takes a method argument and put it on the stack, has no specific type to work with.&lt;/li&gt;

&lt;li&gt;The line 4 shows the list of string but with a number &lt;em&gt;List`1&amp;lt; string &amp;gt;&lt;/em&gt;, this number is the &lt;strong&gt;arity&lt;/strong&gt; and correponds to the number of parameterized type used (List&amp;lt; T, U &amp;gt; has an arity of 2).&lt;/li&gt;

&lt;li&gt;When the parameterized type is used, the IL code add a &lt;strong&gt;!&lt;/strong&gt; as it can be seen line 11 (IL_0012)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;If you have ever played with C# or the .NET framework you should know that &lt;strong&gt;System.Object&lt;/strong&gt; is the base class of every .NET classes. Then, you can think that you could use this class instead of creating generic classes, by creating an &lt;strong&gt;object[]&lt;/strong&gt; for instance. However, there are reasons why you should always use generics instead of System.Object:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No boxing/unboxing operations on value types and no cast operations which increase performance, reduce memory consumption and makes the code more readable&lt;/li&gt;

&lt;li&gt;No runtime exeptions, with generics you have a compile-time type check.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The complete technical guide of &lt;strong&gt;Generics&lt;/strong&gt; is available online on the msdn website &lt;a href='http://msdn.microsoft.com/en-us/library/512aeb7t.aspx' target='_blank' title='msdn.microsoft.com/en-us/library/512aeb7t.aspx'&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Calculating service availability</title>
   <link href="http://thibaultlaurens.github.com/system/2013/01/05/calculating-service-availability"/>
   <updated>2013-01-05T00:00:00+00:00</updated>
   <id>http://thibaultlaurens.github.com/system/2013/01/05/calculating-service-availability</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;MTBF&lt;/strong&gt;, &lt;strong&gt;MTTD&lt;/strong&gt;, &lt;strong&gt;MTTR&lt;/strong&gt; and &lt;strong&gt;MTTF&lt;/strong&gt; are the four parameters required to calculate the availability of a service or an individual component in a specific architecture.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MTBF is the &lt;strong&gt;Mean Time Between Faults&lt;/strong&gt;&lt;/li&gt;

&lt;li&gt;MTTD is the &lt;strong&gt;Mean Time To Detection&lt;/strong&gt;&lt;/li&gt;

&lt;li&gt;MTTR is the &lt;strong&gt;Mean Time To Repair&lt;/strong&gt;&lt;/li&gt;

&lt;li&gt;MTTF is the &lt;strong&gt;Mean Time To Failure&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Well, once we got this, there are just a few little formula to know :&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;MTBF = MTTD + MTTR + MTTF&lt;/strong&gt;&lt;br /&gt;&lt;strong&gt;Availabiliy = MTBF / (MTBF + MTTR)&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For example, a component with a MTBF of 8 days and a MTTR of 3 hours will have:&lt;br /&gt;&lt;strong&gt;Availability&lt;/strong&gt; = (8*24) / (8*24 + 3) = &lt;strong&gt;0.985&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;A good way to understand availability is to look at the downtime per year they represent:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;90% availability = 36 days and 12 hours downtime/year&lt;/li&gt;

&lt;li&gt;99% availability = 87 hours, 36 minutes downtime/year&lt;/li&gt;

&lt;li&gt;99.9% availability = 8 hours,45 minutes, 36 seconds downtime/year&lt;/li&gt;

&lt;li&gt;99.99% availability = 52 minutes,33 seconds downtime/year&lt;/li&gt;

&lt;li&gt;99.999% availability = 5 minutes,15 seconds downtime / year&lt;/li&gt;

&lt;li&gt;99.9999% availability = 31 seconds downtime/year&lt;/li&gt;
&lt;/ul&gt;</content>
 </entry>
 
 <entry>
   <title>Hello Blog!</title>
   <link href="http://thibaultlaurens.github.com/miscellaneous/2013/01/03/hello-world"/>
   <updated>2013-01-03T00:00:00+00:00</updated>
   <id>http://thibaultlaurens.github.com/miscellaneous/2013/01/03/hello-world</id>
   <content type="html">&lt;p&gt;For a first post, I would like to briefly explain how I built this blog. If you are tired of Wordpress or others complicated blog engines and are looking for a very simple and effective way to blog, then &lt;a href='https://github.com/mojombo/jekyll/wiki' target='_blank' title='github.com/mojombo/jekyll'&gt;&lt;strong&gt;Jekyll&lt;/strong&gt;&lt;/a&gt; is what you are looking for! As mentioned in the Github repository, &amp;#8220;Jekyll is a blog aware, static site generator in Ruby&amp;#8221; and is the simpler way to blog I have seen so far.&lt;/p&gt;

&lt;p&gt;This blog is based on it and is hosted right on &lt;a href='https://github.com' target='_blank' title='github.com'&gt;Github&lt;/a&gt;. Yes, because Jekyll is actually the engine used by Github Pages, it is very simple to host a Jekyll blog on a repository named &lt;em&gt;&amp;#8220;USERNAME.github.com&amp;#8221;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Dealing with Jekyll means all of these things that are easily integrated and ready to use like for instance &lt;a href='http://disqus.com/' target='_blank' title='disqus.com'&gt;Disqus&lt;/a&gt; for comments or even &lt;a href='http://www.google.com/analytics/' target='_blank' title='google.com/analytics'&gt;Google Analytics&lt;/a&gt;. A lot of html templates are also available using &lt;a href='http://twitter.github.com/bootstrap/' target='_blank' title='twitter.github.com/bootstrap'&gt;Twitter Bootstrap&lt;/a&gt; or others. I feel a little tired of twitter bootstrap everywhere so I choose to change and to try &lt;a href='http://foundation.zurb.com/' target='_blank' title='foundation.zurb.com'&gt;Zurb's Foundation&lt;/a&gt; which is finally a great alternative!&lt;/p&gt;

&lt;p&gt;I think Jekyll is the best way to blog for developers because it allows to work with a blog as we work with any project: use of a git repository, work and test in local, update from the command line.. In addition, what makes Jekyll really interesting for a blog is that it runs text-to-html converters like &lt;em&gt;Markdown&lt;/em&gt;, &lt;em&gt;Textile&lt;/em&gt; or &lt;em&gt;Liquid&lt;/em&gt; and allows the web-writer to add inline html. In other word, you can write a post in a simple text editor, add some html tags inside, push it to your Github repository and that&amp;#8217;s it!&lt;/p&gt;

&lt;p&gt;The full stack of the blog is simply Github, Jekyll and Zurb&amp;#8217;s Foundation, you can watch/fork it &lt;a href='https://github.com/ThibaultLaurens/thibaultlaurens.github.com' target='_blank' title='github.com/ThibaultLaurens/thibaultlaurens.github.com'&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;What I really like with &lt;strong&gt;Jekyll&lt;/strong&gt; so far:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Speed&lt;/strong&gt;: it is fast and fast to build a blog with&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Light&lt;/strong&gt;: there is no database and no hosting problem&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Tools&lt;/strong&gt;: a lot of &amp;#8220;out of the box&amp;#8221; tools available&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Web-writers&lt;/strong&gt; oriented: use of text-to-html converters&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to get started blogging with Jekyll, the best way is probably to check &lt;a href='http://jekyllbootstrap.com/' target='_blank' title='jekyllbootstrap.com'&gt;Jekyll-Bootstrap&lt;/a&gt;, a little framework which makes the process even easier.&lt;/p&gt;</content>
 </entry>
 
 
</feed>